{"ast":null,"code":"var _jsxFileName = \"/home/oleg/Task-execution-system/Client/src/containers/Registration/Registration.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport './Registration.scss';\nimport Layout from '../../hoc/Layout/Layout';\n\nclass Registration extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      roles: ['Выберите роль', 'Преподаватель', 'Студент'],\n      fields: [{\n        value: '',\n        label: 'Имя',\n        type: 'text',\n        serverName: 'Name',\n        valid: true\n      }, {\n        value: '',\n        label: 'Отчество',\n        type: 'text',\n        serverName: 'Patronymic',\n        valid: true\n      }, {\n        value: '',\n        label: 'Фамилия',\n        type: 'text',\n        serverName: 'Surname',\n        valid: true\n      }, {\n        value: '',\n        label: 'Логин',\n        type: 'text',\n        serverName: 'UserName',\n        valid: true\n      }, {\n        value: '',\n        label: 'Адрес эл. почты',\n        type: 'email',\n        serverName: 'Email',\n        valid: true\n      }, {\n        value: '',\n        label: 'Роль',\n        type: 'select',\n        valid: true\n      }, {\n        value: '',\n        label: 'Кафедра',\n        type: 'text',\n        serverName: 'Department',\n        invisible: true,\n        valid: true\n      }, {\n        value: '',\n        label: 'Предмет',\n        type: 'text',\n        serverName: 'Discipline',\n        invisible: true,\n        valid: true\n      }, {\n        value: '',\n        label: 'Должность',\n        type: 'text',\n        serverName: 'Position',\n        invisible: true,\n        valid: true\n      }, {\n        value: '',\n        label: 'Группа',\n        type: 'text',\n        serverName: 'Group',\n        invisible: true,\n        valid: true\n      }, {\n        value: '',\n        label: 'Пароль',\n        type: 'password',\n        serverName: 'Password',\n        valid: true\n      }, {\n        value: '',\n        label: 'Введите пароль еще раз',\n        type: 'password',\n        valid: true\n      }]\n    };\n\n    this.onSubmitHandler = event => {\n      event.preventDefault();\n      let success = true; // изначально проверка на валидность со значением true   \n\n      const password = []; // если поле заполнено, валидно и предыдущие поля такие же, значит success = true\n\n      this.state.fields.forEach(el => {\n        if (el.invisible) return;\n\n        if (el.type === 'password') {\n          password.push(el.value);\n        }\n\n        success = !!el.value && success;\n      }); // если пароли не совпадают, то делаем их валидацию success = false\n      // и показываем это на полях\n\n      if (password[0] !== password[1]) {\n        success = false;\n        this.checkPasswordsHandler(false);\n      } else {\n        this.checkPasswordsHandler(true);\n      } // если все поля валидны, то есть success = true\n\n\n      if (success) {\n        this.registerHandler(); // window.location.pathname = '/success'\t\n      } else {\n        // если success = false, то показываем какие поля невалидны\n        this.emptyFieldsHandler();\n      }\n    };\n\n    this.registerHandler = () => {\n      const role = '';\n      const data = {};\n      this.state.fields.forEach(item => {\n        if (item.type === 'select') {\n          if (item.value === 'Студент') role = 'student';else role = 'teacher';\n        }\n\n        if (!item.hasOwnProperty('serverName')) return;\n\n        if (item.hasOwnProperty('invisible')) {\n          if (!item.invisible) data[item.serverName] = item.value;\n        } else {\n          data[item.serverName] = item.value;\n        }\n      });\n      const url = `https://localhost:44303/api/account/register/${role}`;\n      console.log(url);\n      console.log(data); // try {\n      // const response = await axios.post(url, data)\n      // } catch (error) {\n      // console.log(error)\n      // }\n    };\n\n    this.onChangeHandler = (event, index) => {\n      let fields = [...this.state.fields];\n      let control = fields[index];\n      control.value = event.target.value;\n      control.type === 'password' ? fields[index].valid = control.value !== '' : fields[index].valid = control.value.trim() !== '';\n      fields[index] = control;\n      this.setState({\n        fields\n      });\n    };\n\n    this.selectRole = event => {\n      const fields = [...this.state.fields];\n      let index; // вычисляем индекс скрытых полей\n\n      fields.forEach((el, number) => {\n        if (el.hasOwnProperty('invisible')) {\n          index = number;\n        }\n      }); // номер элемента в state.fields, который мы будем, либо показывать, либо скрывать\n\n      for (let i = 0; i < 4; i++) {\n        fields[index - i].invisible = true;\n      } // В зависимости от роли отображаем нужное, либо ничего не меняем\n\n\n      switch (event.target.value) {\n        case 'Преподаватель':\n          for (let i = 1; i < 4; i++) {\n            fields[index - i].invisible = false;\n          }\n\n          break;\n\n        case 'Студент':\n          fields[index].invisible = false;\n          break;\n\n        default:\n          break;\n      } // Меняем поле выбора Роли\n\n\n      fields.forEach((el, number) => {\n        if (el.type === 'select') {\n          index = number;\n        }\n      });\n      let control = fields[index];\n      control.value = event.target.value;\n      control.valid = control.value !== 'Выберите роль';\n      fields[index] = control;\n      this.setState({\n        fields\n      });\n    };\n\n    this.checkPasswordsHandler = result => {\n      const fields = [...this.state.fields];\n      fields.forEach(el => {\n        if (el.type === 'password') el.valid = result;\n      });\n      this.setState({\n        fields\n      });\n    };\n\n    this.emptyFieldsHandler = () => {\n      const fields = [...this.state.fields];\n      fields.forEach(el => {\n        if (el.value === '') el.valid = false;\n      });\n      this.setState({\n        fields\n      });\n    };\n  }\n\n  // Layout - компонент высшего порядка для аутентификации\n  // (универсальный для регистрации, авторизации и восстановления пароля)\n  // поэтому вносим необходимые данные компонента регистрации в props \n  // и редерим компонент Layout \n  render() {\n    return React.createElement(Layout, {\n      head: \"\\u0412\\u0445\\u043E\\u0434\",\n      hTitle: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\",\n      link: \"\\u0423\\u0436\\u0435 \\u0435\\u0441\\u0442\\u044C \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442? \\u0410\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0438\\u0440\\u0443\\u0439\\u0442\\u0435\\u0441\\u044C!\",\n      to: \"/auth\",\n      img: \"images/reg.png\",\n      fields: this.state.fields,\n      roles: this.state.roles,\n      onChange: this.onChangeHandler,\n      onSelect: this.selectRole,\n      onSubmit: this.onSubmitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"submit input_fields\",\n      type: \"submit\",\n      value: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044F\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Registration;","map":{"version":3,"sources":["/home/oleg/Task-execution-system/Client/src/containers/Registration/Registration.js"],"names":["React","axios","Layout","Registration","Component","state","roles","fields","value","label","type","serverName","valid","invisible","onSubmitHandler","event","preventDefault","success","password","forEach","el","push","checkPasswordsHandler","registerHandler","emptyFieldsHandler","role","data","item","hasOwnProperty","url","console","log","onChangeHandler","index","control","target","trim","setState","selectRole","number","i","result","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport './Registration.scss'\nimport Layout from '../../hoc/Layout/Layout'\n\nclass Registration extends React.Component {\n\tstate = {\n\t\troles: ['Выберите роль','Преподаватель','Студент'],\n\t\tfields: [\n\t\t\t{ value: '', label: 'Имя', type: 'text', serverName: 'Name', valid: true },\n\t\t\t{ value: '', label: 'Отчество', type: 'text', serverName: 'Patronymic', valid: true },\n\t\t\t{ value: '', label: 'Фамилия', type: 'text', serverName: 'Surname', valid: true },\n\t\t\t{ value: '', label: 'Логин', type: 'text', serverName: 'UserName', valid: true },\n\t\t\t{ value: '', label: 'Адрес эл. почты', type: 'email', serverName: 'Email', valid: true },\n\t\t\t{ value: '', label: 'Роль', type: 'select', valid: true },\n\t\t\t{ value: '', label: 'Кафедра', type: 'text', serverName: 'Department', invisible: true, valid: true },\n\t\t\t{ value: '', label: 'Предмет', type: 'text', serverName: 'Discipline', invisible: true, valid: true },\n\t\t\t{ value: '', label: 'Должность', type: 'text', serverName: 'Position', invisible: true, valid: true },\n\t\t\t{ value: '', label: 'Группа', type: 'text', serverName: 'Group', invisible: true, valid: true },\n\t\t\t{ value: '', label: 'Пароль', type: 'password', serverName: 'Password', valid: true },\n\t\t\t{ value: '', label: 'Введите пароль еще раз', type: 'password', valid: true },\n\t\t]\n\t}\n\n\t// функция для отправки формы на сервер с проверкой на корректность данных\n\tonSubmitHandler = event => {\n\t\tevent.preventDefault()\n\t\t\n\t\tlet success = true // изначально проверка на валидность со значением true   \n\t\tconst password = []\n\t\t\t\n\t\t// если поле заполнено, валидно и предыдущие поля такие же, значит success = true\n\t\tthis.state.fields.forEach(el => {\n\t\t\tif (el.invisible) return\n\t\t\tif (el.type === 'password') {\n\t\t\t\tpassword.push(el.value)\n\t\t\t}\n\t\t\tsuccess = !!el.value && success\n\t\t})\n\n\t\t// если пароли не совпадают, то делаем их валидацию success = false\n\t\t// и показываем это на полях\n\t\tif (password[0] !== password[1]) {\n\t\t\tsuccess = false\n\t\t\tthis.checkPasswordsHandler(false)\n\t\t} else {\n\t\t\tthis.checkPasswordsHandler(true)\n\t\t}\n\t\t\n\t\t// если все поля валидны, то есть success = true\n\t\tif (success) {\n\t\t\tthis.registerHandler()\n\t\t\t// window.location.pathname = '/success'\t\n\t\t} else {\n\t\t\t// если success = false, то показываем какие поля невалидны\n\t\t\tthis.emptyFieldsHandler()\n\t\t}\n\t}\n\n\tregisterHandler = () => {\n\t\tconst role = ''\n\t\tconst data = {}\n\t\tthis.state.fields.forEach(item => {\n\t\t\tif (item.type === 'select') {\n\t\t\t\tif (item.value === 'Студент') role = 'student'\n\t\t\t\telse role = 'teacher'\n\t\t\t}\n\t\t\tif (!item.hasOwnProperty('serverName')) return\n\t\t\tif (item.hasOwnProperty('invisible')) {\n\t\t\t\tif (!item.invisible) data[item.serverName] = item.value\n\t\t\t} else {\n\t\t\t\tdata[item.serverName] = item.value\n\t\t\t}\n\t\t})\n\t\tconst url = `https://localhost:44303/api/account/register/${role}`\n\t\n\t\tconsole.log(url)\n\t\tconsole.log(data)\n\t\t// try {\n\t\t\t// const response = await axios.post(url, data)\n\t\t// } catch (error) {\n\t\t\t// console.log(error)\n\t\t// }\n\t\t\n\t}\n\n\t// Отслеживаем изменение каждого input поля\n\tonChangeHandler = (event, index) => {\n        let fields = [...this.state.fields]\n\t\tlet control = fields[index]\n\n\t\tcontrol.value = event.target.value\n\t\tcontrol.type === 'password' ? \n\t\t\tfields[index].valid = control.value !== '' : \n\t\t\tfields[index].valid = control.value.trim() !== ''\n        \n        fields[index] = control\n\n        this.setState({\n            fields\n        })\n    }\n\t\n\t// Функция для динамического появления/скрытия дополнительных полей\n\t// при выборе роли пользователя\n\t// + изменение поля Роли\n\tselectRole = event => {\n\t\tconst fields = [...this.state.fields]\n\t\tlet index;\n\t\t\n\t\t// вычисляем индекс скрытых полей\n\t\tfields.forEach((el, number) => {\n\t\t\tif (el.hasOwnProperty('invisible')) {\n\t\t\t\tindex = number\n\t\t\t} \n\t\t})\n\n\t \t// номер элемента в state.fields, который мы будем, либо показывать, либо скрывать\n\t\tfor (let i = 0; i < 4; i++) {\n\t\t\tfields[index - i].invisible = true\n\t\t}\n\t\t\n\t\t// В зависимости от роли отображаем нужное, либо ничего не меняем\n\t\tswitch (event.target.value) {\n\t\t\tcase 'Преподаватель': \n\t\t\t\tfor (let i = 1; i < 4; i++)\t{\n\t\t\t\t\tfields[index - i].invisible = false\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Студент': \n\t\t\t\tfields[index].invisible = false\n\t\t\t\tbreak;\n\t\t\tdefault: break;\n\t\t}\n\n\t\t// Меняем поле выбора Роли\n\t\tfields.forEach((el, number) => {\n\t\t\tif (el.type === 'select') {\n\t\t\t\tindex = number \n\t\t\t} \n\t\t})\n\n\t\tlet control = fields[index]\n\n\t\tcontrol.value = event.target.value\n\t\tcontrol.valid = control.value !== 'Выберите роль'\n\t\t\n\t\tfields[index] = control\n\n\t\tthis.setState({\n\t\t\tfields\n\t\t})\n\t}\n\n\t// Смена валидации паролей, в случае их совпадения или несовпадения\n\tcheckPasswordsHandler = result => {\n\t\tconst fields = [...this.state.fields]\n\t\tfields.forEach(el => {\n\t\t\tif (el.type === 'password')\tel.valid = result\n\t\t})\n\n\t\tthis.setState({fields})\n\t}\n\n\t// Отображение всех пустых полей\n\temptyFieldsHandler = () => {\n\t\tconst fields = [...this.state.fields]\n\t\tfields.forEach(el => {\n\t\t\tif (el.value === '') el.valid = false\n\t\t})\n\n\t\tthis.setState({fields})\n\t}\n\n\t// Layout - компонент высшего порядка для аутентификации\n\t// (универсальный для регистрации, авторизации и восстановления пароля)\n\t// поэтому вносим необходимые данные компонента регистрации в props \n\t// и редерим компонент Layout \n\trender() {\n        return (\n\t\t\t<Layout\n\t\t\t\thead='Вход'\n\t\t\t\thTitle='Регистрация'\n\t\t\t\tlink='Уже есть аккаунт? Авторизируйтесь!'\n\t\t\t\tto='/auth'\n\t\t\t\timg='images/reg.png'\n\t\t\t\tfields={this.state.fields}\n\t\t\t\troles={this.state.roles}\n\t\t\t\tonChange={this.onChangeHandler}\n\t\t\t\tonSelect={this.selectRole}\n\t\t\t\tonSubmit={this.onSubmitHandler}\n\t\t\t>\n\t\t\t\t<input className='submit input_fields' type='submit' value='Регистрация пользователя' />\n\t\t\t</Layout>\n        )\n    }\n}\n\nexport default Registration"]},"metadata":{},"sourceType":"module"}